@{
    ViewData["Title"] = "DB Backup / Restore";
}
<h2>Database backup / restore</h2>
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<form action="/api/admin/db/restore" method="post" enctype="multipart/form-data">
    <input type="file" name="backupZip" accept=".zip" required />
    <button type="submit">Nahrát zálohu (ZIP)</button>
</form>

<script>
    // stáhne zip přes API a nabídne ke stažení
    async function downloadBackup() {
      const resp = await fetch('/api/admin/db/backup', { method: 'GET', credentials: 'include' });
      if (!resp.ok) {
        const t = await resp.text();
        alert('Chyba při vytváření zálohy: ' + t);
        return;
      }
      const blob = await resp.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      // jméno souboru bude nastaveno z Content-Disposition, ale pro jistotu:
      a.download = 'photoapp-backup.zip';
      document.body.appendChild(a);
      a.click();
      a.remove();
      window.URL.revokeObjectURL(url);
    }

    // upload + restore (posílá multipart/form-data pole s názvem 'backupZip')
    async function uploadRestore(fileInput) {
      const file = fileInput?.files?.[0];
      if (!file) return alert('Vyber soubor.');

      if (file.size > 200 * 1024 * 1024) return alert('Soubor je příliš velký.');

      const form = new FormData();
      // důležité: jméno pole musí odpovídat tomu, co server očekává -> 'backupZip'
      form.append('backupZip', file);

      const resp = await fetch('/api/admin/db/restore', {
        method: 'POST',
        body: form,
        credentials: 'include'
      });

      // Pokusíme se číst JSON redirect nebo prostý text
      if (!resp.ok) {
        const txt = await resp.text();
        alert('Restore failed: ' + txt);
        return;
      }

      // pokud server vrací JSON s { redirect: "..." }, přesměrujeme
      const contentType = resp.headers.get('content-type') || '';
      if (contentType.includes('application/json')) {
        try {
          const json = await resp.json();
          if (json?.redirect) {
            window.location.href = json.redirect;
            return;
          }
        } catch { /* ignore */ }
      }

      // pokud server poslal 302 (RedirectToAction) a jsme v fetch, nebudeme automaticky přesměrováni,
      // takže prostě přejdeme na index Photos jako fallback
      alert('Restore OK');
      window.location.href = '/Photos';
    }

    // bezpečně připojíme event listenery jen pokud element existuje
    document.addEventListener('DOMContentLoaded', () => {
      const downloadBtn = document.getElementById('downloadBtn');
      if (downloadBtn) downloadBtn.addEventListener('click', downloadBackup);

      const restoreBtn = document.getElementById('restoreBtn');
      const restoreFile = document.getElementById('restoreFile');

      if (restoreBtn && restoreFile) {
        restoreBtn.addEventListener('click', () => uploadRestore(restoreFile));
      }
    });
</script>